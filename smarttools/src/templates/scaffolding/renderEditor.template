<%  if (property.type == Boolean || property.type == boolean)
        out << renderBooleanEditor(domainClass, property)
    else if (property.type && Number.isAssignableFrom(property.type) || (property.type?.isPrimitive() && property.type != boolean))
        out << renderNumberEditor(domainClass, property)
    else if (property.type == String)
        out << renderStringEditor(domainClass, property)
    else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time || property.type == Calendar)
        out << renderDateEditor(domainClass, property)
    else if (property.type == URL)
        out << renderStringEditor(domainClass, property)
    else if (property.type && property.isEnum())
        out << renderEnumEditor(domainClass, property)
    else if (property.type == TimeZone)
        out << renderSelectTypeEditor("timeZone", domainClass, property)
    else if (property.type == Locale)
        out << renderSelectTypeEditor("locale", domainClass, property)
    else if (property.type == Currency)
        out << renderSelectTypeEditor("currency", domainClass, property)
    else if (property.type==([] as Byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.type==([] as byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.manyToOne || property.oneToOne)
        out << renderManyToOne(domainClass, property)
    else if ((property.oneToMany && !property.bidirectional) || (property.manyToMany && property.isOwningSide())) {
        def str = renderManyToMany(domainClass, property)
        if (str != null) {
            out << str
        }
    }
    else if (property.oneToMany)
        out << renderOneToMany(domainClass, property)

    private renderEnumEditor(domainClass, property) {
		def sb = new StringBuilder("")
        sb << '<g:select name="' << property.name << '"'
 		sb << ' from="${' << "${property.type.name}?.values()" << '}"'
 		sb << ' keys="${' << property.type.name << '.values()*.name()}"'
		if (isRequired()) sb << ' required=""'
		sb << ' value="${' << "${domainInstance}?.${property.name}?.name()" << '}" '
                cp?.attributes?.each { k, v ->
                    sb << "${k}=\"${v}\" "
                }
		sb << renderNoSelection(property)
		sb << '/>'
		sb as String
    }

    private renderStringEditor(domainClass, property) {
        if (!cp) {
            return '<div class="col-md-4 col-sm-4 col-xs-12"><g:textField class="form-control col-md-7 col-xs-12 \${hasErrors(bean:' << domainClass.propertyName << 'Instance, field:\'' << property.name << '\', \'parsley-error\')}" name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" /></div>'
        } else {
			def sb = new StringBuilder("")
			sb << '<div class="col-md-4 col-sm-4 col-xs-12">'
            if ("textarea" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
                sb << '<g:textArea class="form-control" name="' << property.name << '"'
 				sb << ' cols="40" rows="5"'
				if (cp.maxSize) sb << ' maxlength="' << cp.maxSize << '"'
				if (isRequired()) sb << ' required=""'
 				sb << ' value="${' << "${domainInstance}?.${property.name}" << '}"'
				sb << '/>'
            } else if (cp.inList) {
				sb << '<g:select name="' << property.name << '"'
				sb << ' class="select2_single form-control col-md-7 col-xs-12 \${hasErrors(bean:'<< domainClass.propertyName << 'Instance, field:\'' << property.name << '\', \'parsley-error\')}"'
				sb << ' from="${' << "${domainInstance}.constraints.${property.name}.inList" << '}"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="${' << "${domainInstance}?.${property.name}" << '}"'
				sb << ' valueMessagePrefix="' << "${domainClass.propertyName}.${property.name}" << '"'
				sb << renderNoSelection(property)
				sb << '/>'
			} else {
				if (cp.password) {
					sb << '<g:field class="form-control col-md-7 col-xs-12 \${hasErrors(bean:' << domainClass.propertyName << 'Instance, field:\'' << property.name << '\', \'parsley-error\')}" type="password"'
				} else if (cp.url) {
					sb << '<g:field class="form-control col-md-7 col-xs-12 \${hasErrors(bean:' << domainClass.propertyName << 'Instance, field:\'' << property.name << '\', \'parsley-error\')}" type="url"'
				} else if (cp.email) {
					sb << '<g:field class="form-control col-md-7 col-xs-12 \${hasErrors(bean:' << domainClass.propertyName << 'Instance, field:\'' << property.name << '\', \'parsley-error\')}" type="email"'
				} else {
					sb << '<g:textField class="form-control col-md-7 col-xs-12 \${hasErrors(bean:'<< domainClass.propertyName << 'Instance, field:\'' << property.name << '\', \'parsley-error\')}"'
				}
				sb << ' name="' << property.name << '"'
				if (cp.maxSize) sb << ' maxlength="' << cp.maxSize << '"'
				if (!cp.editable) sb << ' readonly="readonly"'
				if (cp.matches) sb << ' pattern="${' << "${domainInstance}.constraints.${property.name}.matches" << '}"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="${' << "${domainInstance}?.${property.name}" << '}"'
				sb << '/>'
			}
			
			sb << '</div>'
			sb as String
        }
    }

    private renderByteArrayEditor(domainClass, property) {
        return '<div class=\"col-md-4 col-sm-4 col-xs-12\"><input class=\"form-control col-md-7 col-xs-12 \${hasErrors(bean:' << domainClass.propertyName << 'Instance, field:\'' << property.name << '\', \'parsley-error\')}\" type=\"file\" id=\"' << property.name << '\" name=\"' << property.name << '\" /></div>'
    }

    private renderManyToOne(domainClass,property) {
        if (property.association) {
			def sb = new StringBuilder()
			sb << '<div class="col-md-4 col-sm-4 col-xs-12">'
            sb << '<g:select'
            sb << ' class="select2_single form-control col-md-7 col-xs-12 \${hasErrors(bean:'<< domainClass.propertyName << 'Instance, field:\'' << property.name << '\', \'parsley-error\')}" tabindex="-1"'
			// id is "x" and name is "x.id" as the label will have for="x" and "." in an id will confuse CSS
 			sb << ' id="' << property.name << '"'
 			sb << ' name="' << property.name << '.id"'
 			sb << ' from="${' << property.type.name << '.list()}"'
 			sb << ' optionKey="id"'
			if (isRequired()) sb << ' required=""'
 			sb << ' value="${' << "${domainInstance}?.${property.name}" << '?.id}"'
 			sb << renderNoSelection(property)
 			sb << '/></div>'
			sb as String
        }
    }

    private renderManyToMany(domainClass, property) {
        def cls = property.referencedDomainClass?.clazz
        if (cls == null) {
            if (property.type instanceof Collection) {
                cls = org.springframework.core.GenericCollectionTypeResolver.getCollectionType(property.type)
            }
        }

        if (cls != null) {
            def sb = new StringBuilder()
            sb << '<g:select name="' << property.name << '"'
            sb << ' from="${' << cls.name << '.list()}"'
            sb << ' multiple="multiple"'
            sb << ' optionKey="id"'
            sb << ' size="5"'
            if (isRequired()) sb << ' required=""'
            sb << ' value="${' << "${domainInstance}?.${property.name}" << '*.id}"'
            sb << ' class="many-to-many"'
            sb << '/>'
            sb as String

        }

    }

    private renderOneToMany(domainClass, property) {
        def sw = new StringWriter()
        def pw = new PrintWriter(sw)
        pw.println()
        pw.println "<div class=\"col-md-4 col-sm-4 col-xs-12 accordion\" id=\"accordion1\" role=\"tablist\" aria-multiselectable=\"true\">"
        pw.println "	<div class=\"panel\">"
        pw.println " 		<a class=\"panel-heading collapsed\" role=\"tab\" id=\"headingOne1\" data-toggle=\"collapse\" data-parent=\"#accordion1\" href=\"#collapseOne1\" aria-expanded=\"true\" aria-controls=\"collapseOne\">"
        pw.println "        	<h3 class=\"panel-title\"><g:message code=\"default.list.label\" default=\"Listado\" /></h3>"
        pw.println "        </a>"
        pw.println "    	<div id=\"collapseOne1\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingOne\">"
        pw.println "			<div class=\"panel-body\">"
        pw.println "				<ul class=\"one-to-many\">"
        pw.println "				<g:each in=\"\${${domainInstance}?.${property.name}?}\" var=\"${property.name[0]}\">"
        pw.println "    				<li><g:link class=\"btn btn-default btn-xs\" controller=\"${property.referencedDomainClass.propertyName}\" action=\"show\" id=\"\${${property.name[0]}.id}\">\${${property.name[0]}?.encodeAsHTML()}</g:link></li>"
        pw.println "			</g:each>"
		pw.println "			<li>"
        pw.println "			<g:link class=\"btn btn-info btn-xs\" controller=\"${property.referencedDomainClass.propertyName}\" action=\"create\" params=\"['${domainClass.propertyName}.id': ${domainInstance}?.id]\">\${message(code: 'default.add.label', args: [message(code: '${property.referencedDomainClass.propertyName}.label', default: '${property.referencedDomainClass.shortName}')])}</g:link>"
		pw.println "			</li>"
        pw.println "			</ul>"
        pw.println "			</div>"
        pw.println "		</div>"
        pw.println "	</div>"
        pw.println "</div>"
        pw.println ""
        return sw.toString()
    }

    private renderNumberEditor(domainClass, property) {
        if (!cp) {
            if (property.type == Byte) {
                return "<g:select name=\"${property.name}\" from=\"\${-128..127}\" class=\"range\" value=\"\${fieldValue(bean: ${domainInstance}, field: '${property.name}')}\" />"
            } else {
                return "<g:field type=\"number\" name=\"${property.name}\" value=\"\${${domainInstance}.${property.name}}\" />"
            }
        } else {
	        def sb = new StringBuilder()
            if (cp.range) {
                sb << '<g:select name="' << property.name << '"'
 				sb << ' from="${' << "${cp.range.from}..${cp.range.to}" << '}"'
 				sb << ' class="range"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="${' << "fieldValue(bean: ${domainInstance}, field: '${property.name}')" << '}"'
				sb << renderNoSelection(property)
				sb << '/>'
            } else if (cp.inList) {
                sb << '<g:select name="' << property.name << '"'
 				sb << ' from="${' << "${domainInstance}.constraints.${property.name}.inList" << '}"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="${' << "fieldValue(bean: ${domainInstance}, field: '${property.name}')" << '}"'
				sb << ' valueMessagePrefix="' << "${domainClass.propertyName}.${property.name}" << '"'
				sb << renderNoSelection(property)
				sb << '/>'
            } else {
				sb << '<g:field'
				sb << ' name="' << property.name << '"'
				if (property.type in [float, double, Float, Double, BigDecimal]) {
					sb << ' value="${' << "fieldValue(bean: ${domainInstance}, field: '${property.name}')" << '}"'
				} else {
					sb << ' type="number"'
					if (cp.min != null) sb << ' min="' << cp.min << '"'
					if (cp.max != null) sb << ' max="' << cp.max << '"'
					sb << ' value="${' << domainInstance << '.' << property.name << '}"'
				}
				if (isRequired()) sb << ' required=""'
				sb << '/>'
            }
			sb as String
        }
     }

    private renderBooleanEditor(domainClass, property) {
        if (!cp) {
            return "<div class=\"col-md-9 col-sm-9 col-xs-12\"><div class=\"\"><label><g:checkBox class=\"js-switch\" name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" /></label></div></div>"
        } else {
            def sb = new StringBuilder("<div class=\"col-md-9 col-sm-9 col-xs-12\"><div class=\"\"><label>")
            sb << "<g:checkBox class=\"js-switch\" name=\"${property.name}\" "
            if (cp.widget) sb << "widget=\"${cp.widget}\" ";
            cp.attributes.each { k, v ->
                sb << "${k}=\"${v}\" "
            }
            sb << "value=\"\${${domainInstance}?.${property.name}}\" /></label></div></div>"
            return sb.toString()
        }
    }

    private renderDateEditor(domainClass, property) {
        def precision = (property.type == Date || property.type == java.sql.Date || property.type == Calendar) ? "day" : "minute";
        if (!cp) {
        	def sb = new StringBuilder('<div class="col-md-4 col-sm-4 col-xs-12">')
            sb << '	<g:field class="form-control date-picker col-md-7 col-xs-12 \${hasErrors(bean:'<< domainClass.propertyName << 'Instance, field:\'' << property.name << '\', \'parsley-error\')}"'
            sb << '	name=\"' << property.name << ' \" precision=\"' << precision << '\" value=\"\${formatDate(date:${domainInstance}?.${property.name})}\" type="text"/>'
            sb << "<g:hiddenField name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
            sb << '</div>'
        } else {
            if (!cp.editable) {
                return "\${${domainInstance}?.${property.name}?.toString()}"
            } else {
                def sb = new StringBuilder('<div class="col-md-4 col-sm-4 col-xs-12">')
                sb << '<g:field class="form-control date-picker col-md-7 col-xs-12 \${hasErrors(bean:'<< domainClass.propertyName << 'Instance, field:\'' << property.name << '\', \'parsley-error\')}"'
                sb << ' name=\"' << property.name << '\" type="text"'
                if (cp.format) sb << "format=\"${cp.format}\" "
                if (cp.widget) sb << "widget=\"${cp.widget}\" "
                cp.attributes.each { k, v ->
                    sb << "${k}=\"${v}\" "
                }
                if (!cp.attributes.precision) {
                    sb << " precision=\"${precision}\" "
                }
                sb << " value=\"\${formatDate(date:${domainInstance}?.${property.name})}\" ${renderNoSelection(property)} />"
                sb << "<g:hiddenField name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
                sb << ' </div>'

                return sb.toString()
            }
        }
    }

    private renderSelectTypeEditor(type, domainClass,property) {
        if (!cp) {
            return "<g:${type}Select name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
        } else {
            def sb = new StringBuilder("<g:${type}Select name=\"${property.name}\" ")
            if (cp.widget) sb << "widget=\"${cp.widget}\" ";
            cp.attributes.each { k, v ->
                sb << "${k}=\"${v}\" "
            }
            sb << "value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)} />"
            return sb.toString()
        }
    }

    private renderNoSelection(property) {
        if (isOptional()) {
            if (property.manyToOne || property.oneToOne) {
                return " noSelection=\"['null': '']\""
            } else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time || property.type == Calendar) {
                return "default=\"none\" noSelection=\"['': '']\""
            } else {
                return " noSelection=\"['': '']\""
            }
        }
        return ""
    }

	private boolean isRequired() {
		!isOptional()
	}

	private boolean isOptional() {
	    if (!cp) {
	        return false
	    }
	    else {
	        cp.nullable || cp.propertyType in [boolean, Boolean]
	    }
	}
%>
